reset;
model Progetto_Bradan_Graziani/VideoOnDemand_v2.2.mod;
data Progetto_Bradan_Graziani/VideoOnDemand_v2.2.dat;
option solver cplex;
solve;
for {(i,j) in Links}{
if i == 'A' and j == 'C' then{
    # delay to avoid clashes with Flow1C and Flow2C
	let Latency1A := Latency1A + Flow1[i,j,'A']*LinkActivation[i,j] + 10;
	# delay to avoid clashes with Flow1A, Flow1C and Flow2C
	let Latency2A := Latency2A + Flow2[i,j,'A']*LinkActivation[i,j] + 17;	
	}
if i == 'C' and j == 'E' then {
    let Latency1A := Latency1A + Flow1[i,j,'A']*LinkActivation[i,j];
	let Latency2A := Latency2A + Flow2[i,j,'A']*LinkActivation[i,j];
	let Latency1C := Latency1C + Flow1[i,j,'C']*LinkActivation[i,j];
	# delay to avoid clashes with Flow1C
	let Latency2C := Latency2C + Flow2[i,j,'C']*LinkActivation[i,j] + 5;
}
if i == 'E' and j == 'G' then {
    let Latency1A := Latency1A + Flow1[i,j,'A']*LinkActivation[i,j];
	let Latency2A := Latency2A + Flow2[i,j,'A']*LinkActivation[i,j];
	let Latency1C := Latency1C + Flow1[i,j,'C']*LinkActivation[i,j];
	let Latency2C := Latency2C + Flow2[i,j,'C']*LinkActivation[i,j];
}
}
let MaxLatency := max(Latency1A, Latency2A,Latency1C, Latency2C);
display Flow1, Flow2, LinkActivation, TotalFlowCosts, MaxLatency;
display Flow1, Flow2, LinkActivation, TotalFlowCosts, MaxLatency > Progetto_Bradan_Graziani/VideoOnDemand_v2.2.txt;
# quit;